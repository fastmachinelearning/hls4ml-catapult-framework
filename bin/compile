#!/usr/bin/python3
import subprocess
import os
import sys
import re
import argparse
from io import StringIO
from pathlib import Path


class StringIOWithPrint(StringIO):
    def __init__(self, print_stdout):
        super().__init__()

        self._print_stdout = print_stdout

    def write(self, s):
        if self._print_stdout:
            sys.stdout.write(s)

        return super().write(s)

    def flush(self):
        if self._print_stdout:
            sys.stdout.flush()

        super().flush()


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Compile and test hls4ml '
                                     'Catapult projects.',
                                     epilog='Note that there is a special '
                                     'project called EntireTemplate which '
                                     'aims for checking the entire Catapult '
                                     'C++ backend code and does not have a test '
                                     'bench. You can compile it explicitly by '
                                     'specifying ID 0 with no --stress flag.')
    parser.add_argument('nums', metavar='ID', type=str,
                        nargs='*', help='the IDs of projects to be processed, '
                        'e.g. 1 2 3 will test Net0001, Net0002 and '
                        'Net0003 respectively. If not provided, all Net '
                        ' projects (except stress ones) + EntireTemplate will '
                        'be processed.')
    parser.add_argument('--stress', action='store_true', dest='stress',
                        help='process stress projects (i.e. starting '
                        'with SNet) instead of standard ones (i.e. starting '
                        'with Net). This will cause EntireTemplate not to be '
                        'processed.')
    parser.add_argument('--no-test', action='store_false', dest='do_test',
                        help='do not run test benches')
    parser.add_argument('--singularity', action='store_true',
                        dest='singularity', help='use the Singularity image '
                        'with Catapult (i.e. catapult.sif in "bin") instead of '
                        'the local installation')
    parser.add_argument('--jobs', metavar='INT', type=int, dest='jobs',
                        default=1, help='the number of projects to be '
                        'processed in parallel (default: 1, note: if the value '
                        'is greater than 1, all outputs will be printed at the '
                        'end except for errors, which will be printed '
                        'instantaneously to STDERR)')

    args = parser.parse_args()
    
    os.chdir(str(Path(__file__).parent.parent))

    stress = args.stress
    do_test = args.do_test
    singularity = args.singularity
    jobs = args.jobs

    if len(args.nums) == 0:
        if args.stress:
            nums = []
            pattern = r'^SNet(\S+)$'
        else:
            nums = ['000']
            pattern = r'^Net(\S+)$'

        for project in os.listdir('projects'):
            match = re.search(pattern, project)
            if match is not None:
                nums.append(match.group(1))

        nums.sort(key=lambda x: (len(x), x))
    else:
        nums = args.nums

    for i in range(len(nums)):
        digit_count = len(re.search(r'(\d+)', nums[i]).group(1))
        nums[i] = (4 - digit_count) * '0' + nums[i]

    if not os.path.exists('compile_logs'):
        os.makedirs('compile_logs')
    else:
        for entry in os.listdir('compile_logs'):
            os.remove(os.path.join('compile_logs', entry))

    def nums_loop(i, buf):
        stream = StringIOWithPrint(print_stdout=not buf)
        name = f'Net{i}' if i != '0000' else 'EntireTemplate'
        error = False

        if stress:
            if name == 'EntireTemplate':
                return stream.getvalue(), error

            name = 'S' + name
        
        test = 1 if do_test and i != '0000' else 0

        print(f'{name}... ', end='', flush=True, file=stream)

        cmd_parts = ['catapult', '-shell', '-file',
                     'bin/synthesize.tcl']

        if singularity:
            cmd_parts = ['singularity', 'exec',
                         '--env',
                         f'MAIN_PATH={os.getcwd()}',
                         '--env',
                         f'PROJECT_NAME={name}',
                         '--env',
                         f'TEST={test}',
                         '--env',
                         'COMPILE_ONLY=1',
                         'bin/catapult.sif'] + cmd_parts
            env = None
        else:
            env = os.environ.copy()
            env.update({
                'MAIN_PATH': os.getcwd(),
                'PROJECT_NAME': name,
                'TEST': str(test),
                'COMPILE_ONLY': '1'
            })

        proc = subprocess.run(cmd_parts,
                              stdout=subprocess.PIPE,
                              stderr=subprocess.STDOUT,
                              encoding='utf-8',
                              env=env)

        with open(os.path.join('compile_logs', name + '.log'), 'w') as log_file:
            log_file.write(proc.stdout)

        if proc.returncode == 0:
            error_match = re.search('Error:.*make', proc.stdout)

            if error_match is not None:
                error = True
                print('TEST FAIL', flush=True, file=stream)

                if buf:
                    print(f'[stderr] {name}, TEST FAIL', file=sys.stderr)
            else:
                diff_match = \
                    re.search(r'{{LARGEST_RELATIVE_DIFFERENCE_OVERALL=(.+)}}',
                              proc.stdout)

                if diff_match is not None:
                    diff = float(diff_match.group(1))
                    against_zero_comparison_tests = \
                        len(re.findall(
                            '{{COMPARISON_AGAINST_ZERO_DETECTED}}', proc.stdout))

                    if diff >= 1.0:
                        status = 'TEST PROBLEM LIKELY'
                    elif against_zero_comparison_tests > 0:
                        status = 'AGAINST-ZERO COMPARISONS IN ' + \
                            str(against_zero_comparison_tests) + ' TEST(S)'
                    else:
                        status = 'OK'

                    print(status + f' (test largest error: {diff})', flush=True,
                          file=stream)
                else:
                    print(f'OK (no testing run)', flush=True, file=stream)
        else:
            error = True
            print('COMPILE FAIL', flush=True, file=stream)

            if buf:
                print(f'[stderr] {name}, COMPILE FAIL', file=sys.stderr)

        return stream.getvalue(), error

    errors = False

    if jobs == 1:
        for i in nums:
            _, error = nums_loop(i, False)

            if error:
                errors = True
    else:
        from joblib import Parallel, delayed
        results = Parallel(n_jobs=jobs, verbose=40)(delayed(nums_loop)(i, True)
                                                    for i in nums)

        to_print = ''

        for result, error in results:
            to_print += result

            if error:
                errors = True

        print(to_print)
                
    print()

    if errors:
        print('ERROR: Some models could not be compiled or tested!')
    else:
        print('SUCCESS: All models could be compiled and tested! You need to '
              'judge the testing results by hand.')

    print(f'See log files in "compile_logs" for more details.')

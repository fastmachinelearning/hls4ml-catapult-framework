#!/usr/bin/python3
import subprocess
import os
import sys
import re
import argparse
from pathlib import Path

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Compile and test hls4ml '
                                     'Catapult projects.',
                                     epilog='Note that there is a special '
                                     'project called EntireTemplate which '
                                     'aims for checking the entire Catapult '
                                     'C++ backend code and does not have a test '
                                     'bench. You can compile it explicitly by '
                                     'specifying ID 0 with no --stress flag.')
    parser.add_argument('nums', metavar='ID', type=int,
                        nargs='*', help='the IDs of projects to be processed, '
                        'e.g. 1 2 3 will test (S)Dense1, (S)Dense2 and '
                        '(S)Dense3 respectively. If not provided, all (S)Dense '
                        ' projects + EntireTemplate will be processed.')
    parser.add_argument('--stress', action='store_true', dest='stress',
                        help='process stress projects (i.e. starting '
                        'with SDense) instead of standard ones (i.e. starting '
                        'with Dense). This will cause EntireTemplate not to be '
                        'processed.')
    parser.add_argument('--no-test', action='store_false', dest='do_test',
                        help='do not run test benches')

    args = parser.parse_args()
    
    os.chdir(str(Path(__file__).parent.parent))

    stress = args.stress
    do_test = args.do_test

    if len(args.nums) == 0:
        if args.stress:
            nums = []
            pattern = r'^SDense(\d+)$'
        else:
            nums = [0]
            pattern = r'^Dense(\d+)$'

        for project in os.listdir('projects'):
            match = re.search(pattern, project)
            if match is not None:
                nums.append(int(match.group(1)))

        nums.sort()
    else:
        nums = args.nums

    if not os.path.exists('compile_logs'):
        os.makedirs('compile_logs')
    else:
        for entry in os.listdir('compile_logs'):
            os.remove(os.path.join('compile_logs', entry))

    errors = False

    for i in nums:
        name = f'Dense{i}' if i > 0 else 'EntireTemplate'

        if stress:
            name = 'S' + name
        
        test = 1 if do_test and i > 0 else 0

        print(f'{name}... ', end='', flush=True)

        filename = None

        for cur_filename in os.listdir(os.path.join('projects', name)):
            if cur_filename.endswith('.ccs'):
                filename = cur_filename
                break

        if filename is None:
            filename = name + '.ccs'

        proc = subprocess.run(['singularity', 'exec',
                               '--env',
                               f'TCL_PROJECT_NAME={name}',
                               '--env',
                               f'TCL_PROJECT_PATH={name}/{filename}',
                               '--env',
                               f'TEST={test}',
                               'bin/catapult.sif',
                               'catapult', '-shell', '-file', 'bin/compile.tcl'],
                              stdout=subprocess.PIPE,
                              stderr=subprocess.STDOUT,
                              encoding='utf-8')

        with open(os.path.join('compile_logs', name + '.log'), 'w') as log_file:
            log_file.write(proc.stdout)

        if proc.returncode == 0:
            if re.search('Error:.*make', proc.stdout) is not None:
                errors = True
                print('TEST FAIL')
            else:
                print('OK')
        else:
            errors = True
            print('COMPILE FAIL')

    print()

    if errors:
        print('ERROR: Some models failed testing or could not be compiled!')
    else:
        print('SUCCESS: All models could be compiled along with passing testing where applicable!')

    print(f'See log files in "compile_logs" for more details.')

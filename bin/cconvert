#!/usr/bin/python3
import argparse
import shutil
from pathlib import Path


PROG_NAME = 'cconvert'


def error(msg):
    print_msg(f'error: {msg}')
    exit(1)


def print_msg(msg):
    print(f'{PROG_NAME}: {msg}')


def copy_files(src_path, dest_path):
    try:
        FIRMWARE_PATH = src_path / Path('firmware')
        FILES = [
            (FIRMWARE_PATH / 'myproject.cpp', ''),
            (FIRMWARE_PATH / 'myproject.h', ''),
            (FIRMWARE_PATH / 'defines.h', ''),
            (FIRMWARE_PATH / 'parameters.h', ''),
            (FIRMWARE_PATH / 'weights', 'weights'),
            (src_path / 'tb_data', 'tb_data'),
        ]

        for path, dest_dir in FILES:
            if path.is_dir():
                shutil.copytree(path, dest_path / dest_dir)
            else:
                shutil.copy2(path, dest_path / dest_dir)
    except Exception as ex:
        shutil.rmtree(dest_path, ignore_errors=True)
        raise ex


def run(src, dest):
    src_path = Path(src)
    dest_path = Path(dest)

    if not src_path.exists():
        error('the source directory does not exist')

    if not dest_path.exists():
        dest_path.mkdir(parents=True)

    # Step 1: Copy the files
    copy_files(src_path, dest_path)

    # Step 2: Replace Vivado-specific parts with Catapult ones

    # Step 3: Generate exp_table.h and invert_table.h

    # Done!
    print_msg('the specified hls4ml Vivado HLS project has been converted '
              'successfully!')


if __name__ == '__main__':
    parser = argparse.ArgumentParser(prog=PROG_NAME,
                                     description='Convert an hls4ml Vivado HLS '
                                     'project to its Catapult equivalent.')
    parser.add_argument('src', metavar='SOURCE',
                        type=str, help='the path to an hls4ml project directory')
    parser.add_argument('dest', metavar='DESTINATION',
                        type=str, help='the path to a directory where the '
                        'Catapult project should be exported to (the directory '
                        'will be created if it does not exist)')

    args = parser.parse_args()
    run(args.src, args.dest)
